//snake
data:text/html;base64,PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8aGVhZD4KICA8dGl0bGU+QmFzaWMgU25ha2UgSFRNTCBHYW1lPC90aXRsZT4KICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgPHN0eWxlPgogIGh0bWwsIGJvZHkgewogICAgaGVpZ2h0OiAxMDAlOwogICAgbWFyZ2luOiAwOwogIH0KCiAgYm9keSB7CiAgICBiYWNrZ3JvdW5kOiBibGFjazsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgfQogIGNhbnZhcyB7CiAgICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTsKICB9CiAgPC9zdHlsZT4KPC9oZWFkPgo8Ym9keT4KPGNhbnZhcyB3aWR0aD0iNDAwIiBoZWlnaHQ9IjQwMCIgaWQ9ImdhbWUiPjwvY2FudmFzPgo8c2NyaXB0Pgp2YXIgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dhbWUnKTsKdmFyIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTsKCi8vIHRoZSBjYW52YXMgd2lkdGggJiBoZWlnaHQsIHNuYWtlIHggJiB5LCBhbmQgdGhlIGFwcGxlIHggJiB5LCBhbGwgbmVlZCB0byBiZSBhIG11bHRpcGxlcyBvZiB0aGUgZ3JpZCBzaXplIGluIG9yZGVyIGZvciBjb2xsaXNpb24gZGV0ZWN0aW9uIHRvIHdvcmsKLy8gKGUuZy4gMTYgKiAyNSA9IDQwMCkKdmFyIGdyaWQgPSAxNjsKdmFyIGNvdW50ID0gMDsKCnZhciBzbmFrZSA9IHsKICB4OiAxNjAsCiAgeTogMTYwLAoKICAvLyBzbmFrZSB2ZWxvY2l0eS4gbW92ZXMgb25lIGdyaWQgbGVuZ3RoIGV2ZXJ5IGZyYW1lIGluIGVpdGhlciB0aGUgeCBvciB5IGRpcmVjdGlvbgogIGR4OiBncmlkLAogIGR5OiAwLAoKICAvLyBrZWVwIHRyYWNrIG9mIGFsbCBncmlkcyB0aGUgc25ha2UgYm9keSBvY2N1cGllcwogIGNlbGxzOiBbXSwKCiAgLy8gbGVuZ3RoIG9mIHRoZSBzbmFrZS4gZ3Jvd3Mgd2hlbiBlYXRpbmcgYW4gYXBwbGUKICBtYXhDZWxsczogNAp9Owp2YXIgYXBwbGUgPSB7CiAgeDogMzIwLAogIHk6IDMyMAp9OwoKLy8gZ2V0IHJhbmRvbSB3aG9sZSBudW1iZXJzIGluIGEgc3BlY2lmaWMgcmFuZ2UKLy8gQHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTUyNzgyMC8yMTI0MjU0CmZ1bmN0aW9uIGdldFJhbmRvbUludChtaW4sIG1heCkgewogIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSkgKyBtaW47Cn0KCi8vIGdhbWUgbG9vcApmdW5jdGlvbiBsb29wKCkgewogIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTsKCiAgLy8gc2xvdyBnYW1lIGxvb3AgdG8gMTUgZnBzIGluc3RlYWQgb2YgNjAgKDYwLzE1ID0gNCkKICBpZiAoKytjb3VudCA8IDQpIHsKICAgIHJldHVybjsKICB9CgogIGNvdW50ID0gMDsKICBjb250ZXh0LmNsZWFyUmVjdCgwLDAsY2FudmFzLndpZHRoLGNhbnZhcy5oZWlnaHQpOwoKICAvLyBtb3ZlIHNuYWtlIGJ5IGl0J3MgdmVsb2NpdHkKICBzbmFrZS54ICs9IHNuYWtlLmR4OwogIHNuYWtlLnkgKz0gc25ha2UuZHk7CgogIC8vIHdyYXAgc25ha2UgcG9zaXRpb24gaG9yaXpvbnRhbGx5IG9uIGVkZ2Ugb2Ygc2NyZWVuCiAgaWYgKHNuYWtlLnggPCAwKSB7CiAgICBzbmFrZS54ID0gY2FudmFzLndpZHRoIC0gZ3JpZDsKICB9CiAgZWxzZSBpZiAoc25ha2UueCA+PSBjYW52YXMud2lkdGgpIHsKICAgIHNuYWtlLnggPSAwOwogIH0KCiAgLy8gd3JhcCBzbmFrZSBwb3NpdGlvbiB2ZXJ0aWNhbGx5IG9uIGVkZ2Ugb2Ygc2NyZWVuCiAgaWYgKHNuYWtlLnkgPCAwKSB7CiAgICBzbmFrZS55ID0gY2FudmFzLmhlaWdodCAtIGdyaWQ7CiAgfQogIGVsc2UgaWYgKHNuYWtlLnkgPj0gY2FudmFzLmhlaWdodCkgewogICAgc25ha2UueSA9IDA7CiAgfQoKICAvLyBrZWVwIHRyYWNrIG9mIHdoZXJlIHNuYWtlIGhhcyBiZWVuLiBmcm9udCBvZiB0aGUgYXJyYXkgaXMgYWx3YXlzIHRoZSBoZWFkCiAgc25ha2UuY2VsbHMudW5zaGlmdCh7eDogc25ha2UueCwgeTogc25ha2UueX0pOwoKICAvLyByZW1vdmUgY2VsbHMgYXMgd2UgbW92ZSBhd2F5IGZyb20gdGhlbQogIGlmIChzbmFrZS5jZWxscy5sZW5ndGggPiBzbmFrZS5tYXhDZWxscykgewogICAgc25ha2UuY2VsbHMucG9wKCk7CiAgfQoKICAvLyBkcmF3IGFwcGxlCiAgY29udGV4dC5maWxsU3R5bGUgPSAncmVkJzsKICBjb250ZXh0LmZpbGxSZWN0KGFwcGxlLngsIGFwcGxlLnksIGdyaWQtMSwgZ3JpZC0xKTsKCiAgLy8gZHJhdyBzbmFrZSBvbmUgY2VsbCBhdCBhIHRpbWUKICBjb250ZXh0LmZpbGxTdHlsZSA9ICdncmVlbic7CiAgc25ha2UuY2VsbHMuZm9yRWFjaChmdW5jdGlvbihjZWxsLCBpbmRleCkgewoKICAgIC8vIGRyYXdpbmcgMSBweCBzbWFsbGVyIHRoYW4gdGhlIGdyaWQgY3JlYXRlcyBhIGdyaWQgZWZmZWN0IGluIHRoZSBzbmFrZSBib2R5IHNvIHlvdSBjYW4gc2VlIGhvdyBsb25nIGl0IGlzCiAgICBjb250ZXh0LmZpbGxSZWN0KGNlbGwueCwgY2VsbC55LCBncmlkLTEsIGdyaWQtMSk7CgogICAgLy8gc25ha2UgYXRlIGFwcGxlCiAgICBpZiAoY2VsbC54ID09PSBhcHBsZS54ICYmIGNlbGwueSA9PT0gYXBwbGUueSkgewogICAgICBzbmFrZS5tYXhDZWxscysrOwoKICAgICAgLy8gY2FudmFzIGlzIDQwMHg0MDAgd2hpY2ggaXMgMjV4MjUgZ3JpZHMKICAgICAgYXBwbGUueCA9IGdldFJhbmRvbUludCgwLCAyNSkgKiBncmlkOwogICAgICBhcHBsZS55ID0gZ2V0UmFuZG9tSW50KDAsIDI1KSAqIGdyaWQ7CiAgICB9CgogICAgLy8gY2hlY2sgY29sbGlzaW9uIHdpdGggYWxsIGNlbGxzIGFmdGVyIHRoaXMgb25lIChtb2RpZmllZCBidWJibGUgc29ydCkKICAgIGZvciAodmFyIGkgPSBpbmRleCArIDE7IGkgPCBzbmFrZS5jZWxscy5sZW5ndGg7IGkrKykgewoKICAgICAgLy8gc25ha2Ugb2NjdXBpZXMgc2FtZSBzcGFjZSBhcyBhIGJvZHkgcGFydC4gcmVzZXQgZ2FtZQogICAgICBpZiAoY2VsbC54ID09PSBzbmFrZS5jZWxsc1tpXS54ICYmIGNlbGwueSA9PT0gc25ha2UuY2VsbHNbaV0ueSkgewogICAgICAgIHNuYWtlLnggPSAxNjA7CiAgICAgICAgc25ha2UueSA9IDE2MDsKICAgICAgICBzbmFrZS5jZWxscyA9IFtdOwogICAgICAgIHNuYWtlLm1heENlbGxzID0gNDsKICAgICAgICBzbmFrZS5keCA9IGdyaWQ7CiAgICAgICAgc25ha2UuZHkgPSAwOwoKICAgICAgICBhcHBsZS54ID0gZ2V0UmFuZG9tSW50KDAsIDI1KSAqIGdyaWQ7CiAgICAgICAgYXBwbGUueSA9IGdldFJhbmRvbUludCgwLCAyNSkgKiBncmlkOwogICAgICB9CiAgICB9CiAgfSk7Cn0KCi8vIGxpc3RlbiB0byBrZXlib2FyZCBldmVudHMgdG8gbW92ZSB0aGUgc25ha2UKZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uKGUpIHsKICAvLyBwcmV2ZW50IHNuYWtlIGZyb20gYmFja3RyYWNraW5nIG9uIGl0c2VsZiBieSBjaGVja2luZyB0aGF0IGl0J3MKICAvLyBub3QgYWxyZWFkeSBtb3Zpbmcgb24gdGhlIHNhbWUgYXhpcyAocHJlc3NpbmcgbGVmdCB3aGlsZSBtb3ZpbmcKICAvLyBsZWZ0IHdvbid0IGRvIGFueXRoaW5nLCBhbmQgcHJlc3NpbmcgcmlnaHQgd2hpbGUgbW92aW5nIGxlZnQKICAvLyBzaG91bGRuJ3QgbGV0IHlvdSBjb2xsaWRlIHdpdGggeW91ciBvd24gYm9keSkKCiAgLy8gbGVmdCBhcnJvdyBrZXkKICBpZiAoZS53aGljaCA9PT0gMzcgJiYgc25ha2UuZHggPT09IDApIHsKICAgIHNuYWtlLmR4ID0gLWdyaWQ7CiAgICBzbmFrZS5keSA9IDA7CiAgfQogIC8vIHVwIGFycm93IGtleQogIGVsc2UgaWYgKGUud2hpY2ggPT09IDM4ICYmIHNuYWtlLmR5ID09PSAwKSB7CiAgICBzbmFrZS5keSA9IC1ncmlkOwogICAgc25ha2UuZHggPSAwOwogIH0KICAvLyByaWdodCBhcnJvdyBrZXkKICBlbHNlIGlmIChlLndoaWNoID09PSAzOSAmJiBzbmFrZS5keCA9PT0gMCkgewogICAgc25ha2UuZHggPSBncmlkOwogICAgc25ha2UuZHkgPSAwOwogIH0KICAvLyBkb3duIGFycm93IGtleQogIGVsc2UgaWYgKGUud2hpY2ggPT09IDQwICYmIHNuYWtlLmR5ID09PSAwKSB7CiAgICBzbmFrZS5keSA9IGdyaWQ7CiAgICBzbmFrZS5keCA9IDA7CiAgfQp9KTsKCi8vIHN0YXJ0IHRoZSBnYW1lCnJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTsKPC9zY3JpcHQ+CjwvYm9keT4KPC9odG1sPgo=












//tetris
data:text/html;base64,

